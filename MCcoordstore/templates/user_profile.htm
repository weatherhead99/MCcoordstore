{% extends "base.htm" %}


{% block headblock %}
<script src="https://cdn.plot.ly/plotly-2.8.3.min.js"></script>
<script src="/static/scripts/plotly_render.js"></script>
<script src="/static/scripts/style_preview.js"></script>
<script src="/static/scripts/poifetch.js"></script>

{% endblock %}


{% block above_navbar %}
<h1>User Profile</h1>
{% endblock %}

{% block content %}

<div id="current_user_id" hidden>{{current_user.userid}}</div>



<h2>Edit Information</h2>

<form method="post">
  {{form.csrf_token}}
  {{form.displayname.label}} {{form.displayname}} <br>
  {{form.default_style_name.label}} {{form.default_style_name}} <br>

  <div id="stylepreview"></div> <br>
  
  <input type="submit" formaction="/profile/userdetails">
  
  <h2> Change Password </h2>
  
  {{form.newpassword.label}} {{form.newpassword}} <br>
  {{form.password_confirm.label}} {{form.password_confirm}} <br>
  <input type="submit" formaction="/profile/password">

</form>


<script>
 const formelem = document.getElementById("styleselectfield");
 formelem.addEventListener(
     'change',
     function() {updatestylepreview(formelem);});

 updatestylepreview(formelem);


</script>


<h2>Your POIs</h2>
<table id="my_pois" class="poi_list">
  <th onclick="poitable.fetch_pois('name')">Name</th>
  <th onclick="poitable.fetch_pois('coord_x')">X</th>
  <th onclick="poitable.fetch_pois('coord_y')">Y</th>
  <th onclick="poitable.fetch_pois('coord_z')">Z</th>
  <th onclick="poitable.fetch_pois('coordtype')">type</th>
  <th>style preview</th>
  <th onclick="poitable.fetch_pois('create_date')">created at</th>
</table>

<script>
 const myuserid = document.getElementById("current_user_id").innerHTML;
 const filter_param = [{ name : "user" , op : "has",
			 val : {
			     name : "userid",
			     op : "eq",
			     val : myuserid
 }}];

 const columns = new Map();
 columns.set("name", null);
 columns.set("coords", "default");
 columns.set("typename", null);

  const styles_to_render = new Map();
  columns.set("stylepreview", function(row, item, rjson)
	      {
		  const stylecell = row.insertCell(-1);
		  stylecell.setAttribute("class", "stylepreview");
		  const styleid =
			item["relationships"]["style"]["data"]["id"];
		  const idstr = "renderpoi" + item["id"] + "style"  + styleid;
		  stylecell.setAttribute("id", idstr);

		 
 if(!styles_to_render.has(Number(styleid)))
		      styles_to_render.set(Number(styleid), new Array());
 
 styles_to_render.get(Number(styleid)).push(stylecell);
		     
 });

  columns.set("create_date", "default");
  columns.set("editdelete", function(row, item, rjson)
	      {
		  const relid =
			Number(item["relationships"]["user"]["data"]["id"]);
		  const myuserid = Number(document.getElementById("current_user_id").innerHTML);
		  if(relid == myuserid)
		  {
		      edit_delete_columns(row, item, rjson);
		  }
	      });

 

 
 const include_vars = {user : ["displayname"],
 style : ["name", "style"]};

   function render_all_styles(styledata)
  {
      const sizes = Array.from(styledata.values()).map(x => x["marker.size"]);
      const symbols = Array.from(styledata.values()).map(x =>
	  x["marker.symbol"]);
      const styleids = Array.from(styledata.keys());
      rdr.replace_styles(symbols, sizes);

      var i =0;
      for(const [id,targets] of styles_to_render.entries())
      {
	  const pos = styleids.indexOf(id);
	  if(pos == -1)
	      throw "logic error: style id not found!";
	  var path = rdr.render_one_svg(pos);
	  svg_style_helper(path, styledata.get(id));
	  
	  for( const tgt of targets)
	  {
	      var thispath = path.cloneNode();
	      var svgitem = svg_centred_render_helper(thispath, tgt, -1, null,
	      10);
	  }
      }
      
  }

 
 class myPOITable extends POITable
 {
 initfn() {
 styles_to_render.clear();
 this.clear_table("my_pois");
 };

 callbackfn(rjson) {
 this.prepare_table_data("my_pois", rjson, columns);
 }

 finalfn() {
 render_all_styles(this.style_data);
 }
 
 };
 
 const poitable = new myPOITable(filter_param, include_vars);


 poitable.fetch_pois("name");
			   
</script>





{% endblock %}
