{% extends "base.htm" %}

{% block content %}

<script src="https://cdn.plot.ly/plotly-2.8.3.min.js"></script>

<div class="columns">
  <div class="poigraph" id="styleplot"></div>
</div>

<h2> test header </h2>
<p>
<form>
  Fill color: <input type="color" id="fillcolor" 
  onchange="updatePlot('fillcolor','marker.color')"><br>
  Line color: <input type="color" id="linecolor" 
  onchange="updatePlot('linecolor', 'marker.line.color')"><br>
  Line Width: <input type="range" min=0 max=10 value=2 id="linewidth" 
		     onchange="updatePlot('linewidth',
			       'marker.line.width')"><br>
  Symbol Size: <input type="range" min=5 max=50 value=20 id="symbolsize"
		      onchange="updatePlot('symbolsize', 'marker.size')">
  <div id="hiddenvalues" hidden>
    Symbol type: <input type="text" id="symtype"> <br>
    SVG style: <input type="text" id="svgstyle"> <br>
    SVG path data: <input type="text" id="svgpathd"> <br>
   SVG item index: <input type="text" id="svgitemidx">
  </div>
</form>
</p>

<script>
  var marker = Plotly.PlotSchema.get().traces.scatter.attributes.marker;
  var symstrings = marker.symbol.values.filter(x => typeof(x)=="string" &&
					       Number.isNaN(Number(x)) ==
					       true);

  var domplot = document.getElementById("styleplot");
  var plotwidth = 15;
  var iotarray = Array.from(Array(plotwidth).keys());


  function updatePlot(domid, prop) {
      var val = document.getElementById(domid).value;
      var update = {[prop] : String(val)};
      Plotly.restyle(domplot,update , 0);
      var svgidx = Number(document.getElementById("svgitemidx").value);
      update_hidden_forms(svgidx);
      
  }
  

  var data = { x : [],
	       y : [],
	       type: "scatter",
	       mode: "markers",
	       marker : {symbol : [],
			 color: "#000000",
			 size : 20,
			 line : {color: "#000000",
				 width : 5}}
	     };

  var layout = {
      xaxis : {visible: false},
      yaxis : {visible: false},
      width: "50%"
  };
  
  var nrows = Math.floor(symstrings.length / plotwidth);
  var symslice = 0;
  for(i=0; i < nrows - 1; i++)
  {
      data.x.push(...iotarray);
      data.y.push(...Array(plotwidth).fill(i));
      data.marker.symbol.push(...symstrings.slice(symslice, symslice + plotwidth));
      symslice += plotwidth;
  }
  var plot = Plotly.newPlot(domplot, [data], layout);
  var svg = document.querySelectorAll("path.point");

  function update_hidden_forms(idx)
  {
      var svgitem = svg[idx];
      var svgstyle = svgitem.attributes.style.value;
      var svgd = svgitem.attributes.d.value;
      document.getElementById("svgstyle").value = svgstyle;
      document.getElementById("svgpathd").value = svgd;

  };
  
  domplot.on("plotly_click", function (data)
	     {
		 if(data.points.length > 1)
		     throw "logic error, only expected 1 point!";

		 var ptidx = data.points[0].pointNumber;
		 document.getElementById("svgitemidx").value = ptidx;
		 
		 var sym = data.points[0].data.marker.symbol[ptidx];
		 document.getElementById("symtype").value = sym;

		 update_hidden_forms(ptidx);
	  });


  

  
</script>

{% endblock %}
