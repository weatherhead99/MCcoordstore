{% extends "base.htm" %}

{% block content %}

<script src="https://cdn.plot.ly/plotly-2.8.3.min.js"></script>

<div class="columns">
  <div class="poigraph" id="styleplot"></div>
</div>

<p>

<form id="styleeditform"  method="post">
  {{form.csrf_token}}
  {{form.stylename.label}} {{form.stylename}} <br>
  {{form.fillcolor.label}} {{form.fillcolor}} <br>
  {{form.linecolor.label}} {{form.linecolor}} 
  {{form.linewidth.label}} {{form.linewidth(min="0", max="10", value="2")}} <br>
  {{form.symbolsize.label}} {{form.symbolsize(min="3", max="30", value="10")}} <br>
  {{form.symbolname}}
  <input type="submit" onsubmit="submit_check()">
</form>

<script>
  function submit_check() {
      const form = document.getElementById("styleeditform");
      if(form.symbolname.value == "")
      {
	  alert("must select a symbol style (click on it!)");
      }
  };
</script>



</p>

<script>
  var marker = Plotly.PlotSchema.get().traces.scatter.attributes.marker;
  var symstrings = marker.symbol.values.filter(x => typeof(x)=="string" &&
					       Number.isNaN(Number(x)) ==
					       true);

  var domplot = document.getElementById("styleplot");
  var plotwidth = 15;
  var iotarray = Array.from(Array(plotwidth).keys());


  function updatePlot(domid, prop) {
      var val = document.getElementById(domid).value;
      var update = {[prop] : String(val)};
      Plotly.restyle(domplot,update , 0);
      //var svgidx = Number(document.getElementById("svgitemidx").value);
      //update_hidden_forms(svgidx);
      
  }
  

  var data = { x : [],
	       y : [],
	       type: "scatter",
	       mode: "markers",
	       marker : {symbol : [],
			 color: "#000000",
			 size : 20,
			 line : {color: "#000000",
				 width : 5}}
	     };

  var layout = {
      autosize : true,
      xaxis : {visible: false, automargin: true},
      yaxis : {visible: false, automargin: true},
      width: "50%",
      margin : {
	  l : 0,
	  r : 0,
	  t : 0,
	  b : 0,
	  pad : 4}

  };
  
  var nrows = Math.floor(symstrings.length / plotwidth);
  var symslice = 0;
  for(i=0; i < nrows - 1; i++)
  {
      data.x.push(...iotarray);
      data.y.push(...Array(plotwidth).fill(i));
      data.marker.symbol.push(...symstrings.slice(symslice, symslice + plotwidth));
      symslice += plotwidth;
  }
  var plot = Plotly.newPlot(domplot, [data], layout);
  var svg = document.querySelectorAll("path.point");

  function update_hidden_forms(idx)
  {
      var svgitem = svg[idx];
      var svgstyle = svgitem.attributes.style.value;
      var svgd = svgitem.attributes.d.value;
      document.getElementById("svgstyle").value = svgstyle;
      document.getElementById("svgpathd").value = svgd;

  };
  
  domplot.on("plotly_click", function (data)
	     {
		 if(data.points.length > 1)
		     throw "logic error, only expected 1 point!";

		 var ptidx = data.points[0].pointNumber;
		 document.getElementById("svgitemidx").value = ptidx;
		 
		 var sym = data.points[0].data.marker.symbol[ptidx];
		 document.getElementById("symtype").value = sym;

		 update_hidden_forms(ptidx);
	  });


  const init_upds = new Map(
      [["fillcolor", "marker.color"],
       ["linecolor", "marker.line.color"],
       ["linewidth", "marker.line.width"],
       ["symbolsize", "marker.size"]]);
  for([k,w] of init_upds.entries())
  {
      updatePlot(k, w);

  };
  
    
</script>

{% endblock %}
