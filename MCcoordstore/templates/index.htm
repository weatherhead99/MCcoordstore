{% extends "base.htm" %}

{% block headblock %}

<script src="https://cdn.plot.ly/plotly-2.8.3.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="static/scripts/plotly_render.js"></script>
<script src="static/scripts/poifetch.js"></script>

{% endblock %}


{% block above_navbar %}

{% endblock %}

{% block content %}

{% if current_user.is_authenticated %}
<h2 class="user_welcome"> Welcome, {{ current_user.username }} </h2>
{% endif %}

<script>
  'use strict';


  const columns = new Map();

  columns.set("name", null);
  columns.set("coords", "default");
  columns.set("typename", null);

  const styles_to_render = new Map();
  columns.set("stylepreview", function(row, item, rjson)
	      {
		  const stylecell = row.insertCell(-1);
		  stylecell.setAttribute("class", "stylepreview");
		  const styleid =
			item["relationships"]["style"]["data"]["id"];
		  const idstr = "renderpoi" + item["id"] + "style"  + styleid;
		  stylecell.setAttribute("id", idstr);

		 
		  if(!styles_to_render.has(Number(styleid)))
		      styles_to_render.set(Number(styleid), new Array());
		  
		  styles_to_render.get(Number(styleid)).push(stylecell);
		     
	      });

  columns.set("userdisplay", "default");
  columns.set("create_date", "default");
  columns.set("editdelete", function(row, item, rjson)
	      {
		  const relid =
			Number(item["relationships"]["user"]["data"]["id"]);
		  const myuserid = Number(document.getElementById("current_user_id").innerHTML);
		  if(relid == myuserid)
		  {
		      edit_delete_columns(row, item, rjson);
		  }
	      });
  
  function plotpoints(jsondata)
  {
      for(const item of jsondata["data"])
      {
	  var attrs = item["attributes"];
	  var txt = attrs["name"];
	  const x = Number(attrs["coords"][0]);
	  const z = Number(attrs["coords"][2]);

	  const style = lookupRelationship(item, jsondata, "style","style");

	  if(attrs["coordtype"] =="OVERWORLD")
	      overworldplot.plotPoint(x,z, txt, style);
	  else if( item["attributes"]["coordtype"] == "NETHER")
	      netherplot.plotPoint(x,z,txt, style);
	  else
	  {
	  }
      };
  };

  const rdr = new PlotlyShapeRenderer();

  function render_all_styles(styledata)
  {
      const sizes = Array.from(styledata.values()).map(x => x["marker.size"]);
      const symbols = Array.from(styledata.values()).map(x =>
	  x["marker.symbol"]);
      const styleids = Array.from(styledata.keys());
      rdr.replace_styles(symbols, sizes);

      var i =0;
      for(const [id,targets] of styles_to_render.entries())
      {
	  const pos = styleids.indexOf(id);
	  if(pos == -1)
	      throw "logic error: style id not found!";
	  var path = rdr.render_one_svg(pos);
	  svg_style_helper(path, styledata.get(id));
	  
	  for( const tgt of targets)
	  {
	      var thispath = path.cloneNode();
	      var svgitem = svg_centred_render_helper(thispath, tgt, -1, null,
	      10);
	  }
      }
      
  }

  const includes = {user : ["displayname"],
		    style : ["styleid", "style"]};
  

  class fullPOITable extends POITable
  {
      initfn() {
	  styles_to_render.clear();
	  netherplot.clearPlot();
	  overworldplot.clearPlot();
	  this.clear_table("list_of_pois");
      }
	  
      callbackfn(rjson) {
	  this.prepare_table_data("list_of_pois", rjson, columns);
	  plotpoints(rjson);
      }

      finalfn() {
	  render_all_styles(this.style_data);
      }
  };

  const ptblfill = new fullPOITable(null, includes);
   
</script>




<h2>POI map</h2>
<div class="columns">
  <div class="poigraph">
    <div id="poi-overworldgraph"></div></div>
  <div class="poigraph">
    <div id="poi-nethergraph"></div>
  </div>
</div>

<script>
  overworlddom = document.getElementById("poi-overworldgraph");
  netherdom = document.getElementById("poi-nethergraph");

  const netherplot = new PlotlyCoordMapRenderer("The Nether", "50%", netherdom);
  const overworldplot = new PlotlyCoordMapRenderer("Overworld", "50%", overworlddom);
</script>

{% if current_user.is_authenticated %}
<h2>Add new POI</h2>
(Press F3+c in minecraft to copy co-ordinates to clipboard)<br>

<div class="clipboardunavailable">
  Paste your clipboard input here:
  <input type="text" id="clipboardcontents">
</div>

<div class="clipboardavailable">
  <button id="clipboardbutton">Fill from clipboard</button>
  
</div>



  <form method="post" class="poiform">
  {{ form.csrf_token }}
  {{ form.name.label }} {{ form.name }}
  {{ form.x.label }} {{ form.x(class_="coordnum") }}
  {{ form.y.label }} {{ form.y(class_="coordnum") }}
  {{ form.z.label }} {{ form.z(class_="coordnum") }}
  {{form.coordtp.label}} {{form.coordtp}}
  {{ form.public.label }} {{ form.public }}
  {{form.style.label }} {{form.style}}
  <input type="submit">
  </form>
{% endif %}




<h2> List of POIs </h2>

<div id="current_user_id" hidden>{{current_user.userid}}</div>

<div class="table_instructions">
  Click on a table heading to sort the POIs by that ordering
</div>

<table class="poi_list" id="list_of_pois">
  <th onclick="ptblfill.fetch_pois('lowercasename')">Name</th>
  <th onclick="ptblfill.fetch_pois('coord_x')">X</th>
  <th onclick="ptblfill.fetch_pois('coord_y')">Y</th>
  <th onclick="ptblfill.fetch_pois('coord_z')">Z</th>
  <th onclick="ptblfill.fetch_pois('coordtype')">type</th>
  <!--<th onclick="fetch_pois('style.name')">style name </th>-->
  <th>style preview</th>
  <th onclick="ptblfill.fetch_pois('user.displayname')">created by</th>
  <th onclick="ptblfill.fetch_pois('create_date')">created at</th>
</table>

<script>
  ptblfill.fetch_pois("lowercasename");

  function parsepastedcoords(txt) {
      const  loc = txt.search("@s");
      const coords = txt.slice(loc +3).split(" ");
      const vals =  coords.filter(x=> x.length > 0).map(x => Number(x));
      if(vals.length != 5)
	  throw "invalid coordinate length";
      return vals;
  };

  function processclipboard(pastedata)
  {
      const coords = parsepastedcoords(pastedata);

      $("#x").val(Math.round(coords[0]));
      $("#y").val(Math.round(coords[1]));
      $("#z").val(Math.round(coords[2]));
  }
  
  $(document).ready( function () {
      if("readText" in navigator.clipboard)
      {
	  $(".clipboardavailable").show();
	  $(".clipboardunavailable").hide();
	  $("#clipboardbutton").click( async function(event) {
	      const pastedata = await navigator.clipboard.readText();
	      return processclipboard(pastedata);
	  });
      }
      else
      {
	  $(".clipboardavailable").hide();
	  $(".clipboardunavailable").show();

	  $("#clipboardcontents").on("paste", async function(event) {
	      const pastedata = await
	      event.originalEvent.clipboardData.getData("text/plain");
	      return processclipboard(pastedata);
	  });
	  
      }
      
  });
  
</script>


{% endblock %}
